//********************************************************************//  CircularArrayQueue.java       Authors: Lewis/Chase////  Represents an array implementation of a queue in which the//  indexes for the front and rear of the queue circle back to 0//  when they reach the end of the array.//********************************************************************package jss2;import jss2.exceptions.*;import java.util.Iterator;public class CircularArrayQueue<T> implements QueueADT<T>{  private final int DEFAULT_CAPACITY = 100;  private int front, rear, count;  private T[] queue;     /******************************************************************    Creates an empty queue using the default capacity.  ******************************************************************/  public CircularArrayQueue()  {  }    /******************************************************************    Creates an empty queue using the specified capacity.  ******************************************************************/  public CircularArrayQueue (int initialCapacity)  {  }    /******************************************************************    Adds the specified element to the rear of this queue, expanding    the capacity of the queue array if necessary.  ******************************************************************/  public void enqueue (T element)  {  }    /******************************************************************    Removes the element at the front of this queue and returns a    reference to it. Throws an EmptyCollectionException if the    queue is empty.  ******************************************************************/  public T dequeue() throws EmptyCollectionException  {  }    /******************************************************************    Returns a reference to the element at the front of this queue.    The element is not removed from the queue.  Throws an    EmptyCollectionException if the queue is empty.    ******************************************************************/  public T first() throws EmptyCollectionException  {  }    /******************************************************************    Returns true if this queue is empty and false otherwise.   ******************************************************************/  public boolean isEmpty()  {  }    /******************************************************************    Returns the number of elements currently in this queue.  ******************************************************************/  public int size()  {  }    /******************************************************************    Returns a string representation of this queue.   ******************************************************************/  public String toString()  {  }  /******************************************************************    Creates a new array to store the contents of this queue with    twice the capacity of the old one.  ******************************************************************/  public void expandCapacity()  {  }}