//********************************************************************// LinkedBinarySearchTree.java          Authors: Lewis/Chase//// Implements the BinarySearchTreeADT interface with links.//********************************************************************package jss2;import jss2.exceptions.*;import jss2.*;public class LinkedBinarySearchTree<T>  extends LinkedBinaryTree<T>                                  implements BinarySearchTreeADT<T>{   /******************************************************************     Creates an empty binary search tree.   ******************************************************************/   public LinkedBinarySearchTree()    {      super();   }      /******************************************************************     Creates a binary search with the specified element as its root.   ******************************************************************/   public LinkedBinarySearchTree (T element)    {      super (element);   }   /******************************************************************     Adds the specified object to the binary search tree in the     appropriate position according to its key value.  Note that     equal elements are added to the right.   ******************************************************************/   public void addElement (T element)    {      BinaryTreeNode<T> temp = new BinaryTreeNode<T> (element);      Comparable<T> comparableElement = (Comparable<T>)element;      if (isEmpty())         root = temp;      else       {         BinaryTreeNode<T> current = root;         boolean added = false;         while (!added)          {            if (comparableElement.compareTo(current.element) < 0)            {               if (current.left == null)                {                  current.left = temp;                  added = true;               }                else                  current = current.left;            }            else            {               if (current.right == null)                {                  current.right = temp;                  added = true;               }                else                  current = current.right;            }         }      }            count++;   }      /******************************************************************     Removes the first element that matches the specified target     element from the binary search tree and returns a reference to     it.  Throws a ElementNotFoundException if the specified target     element is not found in the binary search tree.   ******************************************************************/   public T removeElement (T targetElement)                          throws ElementNotFoundException    {      T result = null;      if (!isEmpty())      {         if (((Comparable)targetElement).equals(root.element))          {            result =  root.element;            root = replacement (root);            count--;         }         else          {            BinaryTreeNode<T> current, parent = root;            boolean found = false;            if (((Comparable)targetElement).compareTo(root.element) < 0)               current = root.left;            else               current = root.right;            while (current != null && !found)             {               if (targetElement.equals(current.element))                {                  found = true;                  count--;                  result =  current.element;                            if (current == parent.left)                  {                     parent.left = replacement (current);                  }                  else                  {                     parent.right = replacement (current);                  }               }               else                {                  parent = current;                           if (((Comparable)targetElement).compareTo(current.element) < 0)                     current = current.left;                  else                     current = current.right;               }            } //while                        if (!found)               throw new ElementNotFoundException("binary search tree");         }      } // end outer if      return result;   }   /******************************************************************     Removes elements that match the specified target element from      the binary search tree. Throws a ElementNotFoundException if      the sepcified target element is not found in this tree.   ******************************************************************/   public void removeAllOccurrences (T targetElement)                                    throws ElementNotFoundException    {      removeElement(targetElement);            try      {         while (contains( (T) targetElement))            removeElement(targetElement);      }            catch (Exception ElementNotFoundException)      {      }   }   /******************************************************************     Removes the node with the least value from the binary search     tree and returns a reference to its element.  Throws an     EmptyBinarySearchTreeException if this tree is empty.    ******************************************************************/   public T removeMin() throws EmptyCollectionException    {   }   /******************************************************************     Removes the node with the highest value from the binary     search tree and returns a reference to its element.  Throws an     EmptyBinarySearchTreeException if this tree is empty.    ******************************************************************/   public T removeMax() throws EmptyCollectionException    {   }   /******************************************************************     Returns the element with the least value in the binary search     tree. It does not remove the node from the binary search tree.      Throws an EmptyBinarySearchTreeException if this tree is empty.   ******************************************************************/   public T findMin() throws EmptyCollectionException    {   }   /******************************************************************     Returns the element with the highest value in the binary     search tree.  It does not remove the node from the binary     search tree.  Throws an EmptyBinarySearchTreeException if this      tree is empty.   ******************************************************************/   public T findMax() throws EmptyCollectionException    {   }   /******************************************************************     Returns a reference to the specified target element if it is     found in the binary tree.  Throws a NoSuchElementException if     the specified target element is not found in this tree.   ******************************************************************/   public T find (T targetElement) throws ElementNotFoundException    {   }   /******************************************************************     Returns a reference to the specified target element if it is     found in this tree.     ******************************************************************/   private BinaryTreeNode<T> findAgain (T targetElement, BinaryTreeNode<T> next)    {   }   /******************************************************************     Returns a reference to a node that will replace the one     specified for removal.  In the case where the removed node has      two children, the inorder successor is used as its replacement.   ******************************************************************/   protected BinaryTreeNode<T> replacement (BinaryTreeNode<T> node)    {      BinaryTreeNode<T> result = null;      if ((node.left == null)&&(node.right==null))         result = null;            else if ((node.left != null)&&(node.right==null))         result = node.left;            else if ((node.left == null)&&(node.right != null))         result = node.right;            else      {         BinaryTreeNode<T> current = node.right;         BinaryTreeNode<T> parent = node;                  while (current.left != null)         {            parent = current;            current = current.left;         }                  if (node.right == current)            current.left = node.left;                  else         {            parent.left = current.right;            current.right = node.right;            current.left = node.left;         }                  result = current;      }            return result;   }}