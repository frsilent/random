//********************************************************************//  DoubleList.java       Authors: Lewis/Chase////  Represents a doubly linked implementation of a list. The front of//  the list is kept by "front" and the rear by "rear". This class //  will be extended to create a specific kind of list.//********************************************************************package jss2;import jss2.exceptions.*;import java.util.Iterator;public class DoubleList<T> implements ListADT<T>, Iterable<T>{   protected DoubleNode<T> front,rear;   protected int count;   /******************************************************************     Creates an empty list using the default capacity.   ******************************************************************/   public DoubleList()   {   }   /******************************************************************     Removes and returns the last element in this list.   ******************************************************************/   public T removeLast () throws EmptyCollectionException   {   }   /******************************************************************     Removes and returns the first element in this list.   ******************************************************************/   public T removeFirst() throws EmptyCollectionException   {   }   /******************************************************************     Removes and returns the specified element.   ******************************************************************/   public T remove (T element)   {      T result;      DoubleNode<T> nodeptr = find (element);      if (nodeptr == null)         throw new ElementNotFoundException ("list");      result = nodeptr.getElement();      /** check to see if front or rear */      if (nodeptr == front)          result = this.removeFirst();      else if (nodeptr == rear)           result = this.removeLast();           else			{			    nodeptr.getNext().setPrevious(nodeptr.getPrevious());             	nodeptr.getPrevious().setNext(nodeptr.getNext());				count--;			}      return result;   }   /******************************************************************     Returns a reference to the element at the front of this list.     The element is not removed from the list.  Throws an     EmptyCollectionException if the list is empty.     ******************************************************************/   public T first() throws EmptyCollectionException   {   }   /******************************************************************     Returns a reference to the element at the rear of this list.     The element is not removed from the list.  Throws an     EmptyCollectionException if the list is empty.     ******************************************************************/   public T last() throws EmptyCollectionException   {   }   /******************************************************************     Returns true if this list contains the specified element.   ******************************************************************/   public boolean contains (T target)   {   }   /******************************************************************     Returns a reference to the specified element, or null if it      is not found.   ******************************************************************/   private DoubleNode<T> find (T target)   {   }   /******************************************************************     Returns true if this list is empty and false otherwise.    ******************************************************************/   public boolean isEmpty()   {   }    /******************************************************************     Returns the number of elements currently in this list.   ******************************************************************/   public int size()   {   }   /******************************************************************     Returns an iterator for the elements currently in this list.   ******************************************************************/   public Iterator<T> iterator()   {   }   /******************************************************************     Returns a string representation of this list.    ******************************************************************/   public String toString()   {   }}