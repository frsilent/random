//********************************************************************//  ArrayList.java       Authors: Lewis/Chase////  Represents an array implementation of a list. The front of//  the list is kept at array index 0. This class will be extended//  to create a specific kind of list.//********************************************************************package jss2;import jss2.exceptions.*;import java.util.Iterator;public class ArrayList<T> implements ListADT<T>, Iterable<T>{   protected final int DEFAULT_CAPACITY = 100;   private final int NOT_FOUND = -1;   protected int rear;   protected T[] list;    /******************************************************************     Creates an empty list using the default capacity.   ******************************************************************/   public ArrayList()   {   }   /******************************************************************     Creates an empty list using the specified capacity.   ******************************************************************/   public ArrayList (int initialCapacity)   {   }   /******************************************************************     Removes and returns the last element in this list.   ******************************************************************/   public T removeLast () throws EmptyCollectionException   {   }   /******************************************************************     Removes and returns the first element in this list.   ******************************************************************/   public T removeFirst() throws EmptyCollectionException   {   }   /******************************************************************     Removes and returns the specified element.   ******************************************************************/   public T remove (T element)   {      T result;      int index = find (element);      if (index == NOT_FOUND)         throw new ElementNotFoundException ("list");      result = list[index];      rear--;      /** shift the appropriate elements */      for (int scan=index; scan < rear; scan++)         list[scan] = list[scan+1];       list[rear] = null;      return result;   }      /******************************************************************     Returns a reference to the element at the front of this list.     The element is not removed from the list.  Throws an     EmptyCollectionException if the list is empty.     ******************************************************************/   public T first() throws EmptyCollectionException   {   }   /******************************************************************     Returns a reference to the element at the rear of this list.     The element is not removed from the list.  Throws an     EmptyCollectionException if the list is empty.     ******************************************************************/   public T last() throws EmptyCollectionException   {   }   /******************************************************************     Returns true if this list contains the specified element.   ******************************************************************/   public boolean contains (T target)   {      return (find(target) != NOT_FOUND);   }   /******************************************************************     Returns the array index of the specified element, or the     constant NOT_FOUND if it is not found.   ******************************************************************/   private int find (T target)   {      int scan = 0, result = NOT_FOUND;      boolean found = false;      if (! isEmpty())         while (! found && scan < rear)            if (target.equals(list[scan]))               found = true;            else               scan++;      if (found)         result = scan;      return result;   }   /******************************************************************     Returns true if this list is empty and false otherwise.    ******************************************************************/   public boolean isEmpty()   {   }    /******************************************************************     Returns the number of elements currently in this list.   ******************************************************************/   public int size()   {   }   /******************************************************************     Returns an iterator for the elements currently in this list.   ******************************************************************/   public Iterator<T> iterator()   {   }   /******************************************************************     Returns a string representation of this list.    ******************************************************************/   public String toString()   {   }   /******************************************************************     Creates a new array to store the contents of this list with     twice the capacity of the old one.   ******************************************************************/   protected void expandCapacity()   {   }}