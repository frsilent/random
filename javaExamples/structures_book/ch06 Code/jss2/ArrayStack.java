//********************************************************************//  ArrayStack.java       Authors: Lewis/Chase////  Represents an array implementation of a stack.//********************************************************************package jss2;import jss2.exceptions.*;import java.util.Iterator;public class ArrayStack<T> implements StackADT<T>{  private final int DEFAULT_CAPACITY = 100;  private int top;  // indicates the next open slot  private transient T[] stack;    /*******************************************************************    Creates an empty stack using the default capacity.  *******************************************************************/  public ArrayStack()  {  }  /*******************************************************************    Creates an empty stack using the specified capacity.  *******************************************************************/  public ArrayStack (int initialCapacity)  {  }  /*******************************************************************    Adds the specified element to the top of this stack, expanding    the capacity of the stack array if necessary.  *******************************************************************/  public void push (T element)  {    if (size() == stack.length)       expandCapacity();    stack[top] = element;    top++;  }  /*******************************************************************    Removes the element at the top of this stack and returns a    reference to it. Throws an EmptyStackException if the stack    is empty.  *******************************************************************/  public T pop() throws EmptyStackException  {    if (isEmpty())      throw new EmptyStackException();    top--;    T result = stack[top];    stack[top] = null;     return result;  }     /*******************************************************************    Returns a reference to the element at the top of this stack.    The element is not removed from the stack.  Throws an    EmptyStackException if the stack is empty.    *******************************************************************/  public T peek() throws EmptyStackException  {  }  /*******************************************************************    Returns true if this stack is empty and false otherwise.   *******************************************************************/  public boolean isEmpty()  {  }   /*******************************************************************    Returns the number of elements in this stack.  *******************************************************************/  public int size()  {  }  /*******************************************************************    Returns a string representation of this stack.   *******************************************************************/  public String toString()  {  }  /*******************************************************************    Creates a new array to store the contents of this stack with    twice the capacity of the old one.  *******************************************************************/  private void expandCapacity()  {  }}